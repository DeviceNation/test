import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;
import reactor.core.publisher.Flux;
import reactor.netty.http.client.HttpClient;
import reactor.netty.tcp.TcpClient;
import reactor.netty.channel.ChannelOption;

import java.time.Duration;

public Mono<Void> streamVideo(ServerWebExchange exchange, String udid, String fileType, String fileName, String httpRangeList) throws Exception {
    // Construct the URI for the video stream
    String uri = this.getSlaveAddress(udid) + String.format("/mobile-management/stream/%s/%s", fileType, fileName);

    // Set up a non-blocking Reactor Netty HTTP client with timeouts
    HttpClient httpClient = HttpClient.create()
        .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000) // 5 seconds connect timeout
        .responseTimeout(Duration.ofSeconds(5))             // 5 seconds read/write timeout
        .doOnConnected(conn -> 
            conn.addHandlerLast(new io.netty.handler.timeout.ReadTimeoutHandler(5))
                .addHandlerLast(new io.netty.handler.timeout.WriteTimeoutHandler(5))
        );

    // Create the WebClient with the above HttpClient
    WebClient webClient = WebClient.builder()
        .clientConnector(new ReactorClientHttpConnector(httpClient))
        .build();

    // Set the content type and range headers for partial streaming
    exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType("video/mp4"));
    exchange.getResponse().getHeaders().add("Accept-Ranges", "bytes");
    if (httpRangeList != null) {
        exchange.getResponse().getHeaders().add("Content-Range", httpRangeList);
    }

    // Make the non-blocking GET request to fetch the video as a stream (Flux<DataBuffer>)
    Flux<DataBuffer> videoStream = webClient.get()
        .uri(uri)
        .accept(MediaType.APPLICATION_OCTET_STREAM)
        .retrieve()
        .bodyToFlux(DataBuffer.class);

    // Stream the video content reactively to the client
    return exchange.getResponse()
        .writeWith(videoStream)
        .doOnError(error -> {
            // Log any errors that occur during the streaming process
            System.out.println("Error occurred while streaming video: " + error.getMessage());
        });
}