Java.perform(function () {
    var ImageReader = Java.use('android.media.ImageReader');
    ImageReader.newInstance.overload('int', 'int', 'int', 'int').implementation = function (width, height, format, maxImages) {
        console.log('ImageReader created: Width = ' + width + ', Height = ' + height + ', Format = ' + format);

        var reader = this.newInstance(width, height, format, maxImages);
        var onImageAvailableListener = Java.use('android.media.ImageReader$OnImageAvailableListener');
        
        reader.setOnImageAvailableListener.implementation = function (listener, handler) {
            var CustomListener = onImageAvailableListener.$new({
                onImageAvailable: function (reader) {
                    // Log when a new image is available
                    console.log('New image available');

                    // Get the latest image and its buffer to manipulate
                    var image = reader.acquireLatestImage();
                    if (image !== null) {
                        var buffer = image.getPlanes()[0].getBuffer();
                        var byteArray = createCustomImageData(buffer.capacity());
                        
                        // Overwrite the existing image buffer
                        buffer.rewind();
                        buffer.put(byteArray);
                        buffer.rewind();

                        console.log('Custom image injected');
                        image.close();
                    }

                    // Call the original listener after manipulation
                    listener.onImageAvailable(reader);
                }
            });
            this.setOnImageAvailableListener(CustomListener, handler);
        };
        return reader;
    };

    // Helper function to create a custom image data
    function createCustomImageData(size) {
        var byteArray = Java.array('byte', Array(size).fill(0));
        for (var i = 0; i < size; i++) {
            // Replace this with your actual image data filling logic
            byteArray[i] = (i % 256); // Sample grayscale pattern
        }
        return byteArray;
    }
});